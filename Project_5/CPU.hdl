// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instruction type resolution
    And(a = instruction[15], b = true, out = ins15);          
    Not(in = instruction[15], out = ins15Not);

    // A instruction and a register
    Mux16(a = instruction, b = ALUOut, sel = instruction[5], out = ARSel);
    Mux16(a = instruction, b=ARSel, sel=ins15, out=ARIn);
    
    // If ins[15] = 0 -> A type -> ARLoad = 1
    // Else it is C type -> Give the value of ALU output -> ARLoad = ins[5]
    Or(a = ins15Not, b = instruction[5], out = ARLoad);
    ARegister(in = ARIn, load = ARLoad, out = AROut);

    // D register

    // If ins[15] = 0 -> A type -> ALU output not pass -> DLoad = 0
    // Else it is C type -> It depends on ins[4] value
    And(a = ins15, b = instruction[4], out = DRLoad);
    DRegister(in = ALUOut, load = DRLoad, out = DROut);

    // C instruction type distinction: calculate A or M
    Mux16(a = AROut, b = inM, sel = instruction[12], out = AMOut);

    // ALU logic
    ALU(x = DROut, y = AMOut, zx = instruction[11], 
        nx = instruction[10], zy = instruction[9], ny = instruction[8], 
        f = instruction[7], no = instruction[6], out = ALUOut, 
        zr = ALUzr, ng = ALUng);

    // outM & writeM & addressM
    And16(a = true, b = ALUOut, out = outM);
    And(a = ins15, b = instruction[3], out = writeM);
    And16(a = true, b = AROut, out[0..14] = addressM[0..14]);

    /** Jump logic
     *  If (ins15 == 0) -> A type -> Can not jump
     *  Else
     *      If (ng = zr = 0) -> ins[0]
     *      If (ng = 0, zr = 1) -> ins[1]
     *      If (ng = 1, zr = 0) -> ins[2]
     *      If (ng = 1, zr = 1) -> ins[2] | ins[1]
     */
    And(a = ALUng, b = instruction[2], out = j1Out);
    And(a = ALUzr, b = instruction[1], out = j2Out);
    Or(a = ALUng, b = ALUzr, out = po);
    Not(in = po, out = ALUpo);
    And(a = ALUpo, b = instruction[0], out = j3Out);
    Or8Way(in[0] = j1Out, in[1] = j2Out, in[2] = j3Out, 
           in[3..7] = false, out = jump);
    And(a = ins15, b = jump, out = jumpLoad);

    // PC
    PC(in = AROut, load = jumpLoad, inc = true, reset = reset, 
       out[0..14] = pc[0..14]);
}
